plugins {
  id 'java-library'
  id 'com.github.hierynomus.license' version '0.16.1'
  id 'org.febit.standard-java' version '1.0.0-SNAPSHOT'
  id 'org.febit.codegen-module' version '1.0.0-SNAPSHOT' apply false
}

group 'org.febit'
version '3.0.0-SNAPSHOT'

ext {

  versions = [
      slf4j              : '1.7.36',
      jodd               : '5.1.6',
      jsr305             : '3.0.2',
      spotbugs           : '4.7.1',
      commonsIo          : '2.11.0',
      commonsLang3       : '3.12.0',
      commonsCollections4: '4.4',
      assertj            : '3.24.2',
      testng             : '7.6.1',
      jackson            : '2.14.2',
      snakeyaml          : '1.33',
      junit              : '5.9.2',
      mockito            : '4.0.0',
      springBoot         : '2.7.10',
      springCloud        : '2021.0.6',
      febitGradleCommon  : '1.0.0-SNAPSHOT',
  ]

  moduleName = 'Febit Common'
  moduleDescription = 'Febit Common Utils'
}

allprojects {

  group rootProject.group
  version rootProject.version

  repositories {
    mavenLocal()
    maven { url "https://maven.aliyun.com/repository/central" }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
  }
}

def javaModules() {
  subprojects.findAll {
    !it.name.endsWith('-bom')
  }
}

configure(javaModules()) {
  apply plugin: 'java-library'
  apply plugin: 'com.github.hierynomus.license'

  apply from: "${rootDir}/gradle/publish-maven.gradle"

  sourceCompatibility = JavaVersion.VERSION_11
  targetCompatibility = JavaVersion.VERSION_11

  test {
    useJUnitPlatform()
  }

  license {
    mapping {
      java = 'SLASHSTAR_STYLE'
    }
    include '**/*.java'
    exclude '**/org/febit/Febit*.java'
    exclude '**/shaded/**/*java'
    strictCheck false
    skipExistingHeaders false
    header rootProject.file('etc/licenseheader.txt')
  }

  dependencies {

    compileOnly 'com.google.code.findbugs:jsr305'
    compileOnly 'com.github.spotbugs:spotbugs-annotations'

    testImplementation 'org.slf4j:slf4j-simple'
    testImplementation 'org.assertj:assertj-core'
    testImplementation 'org.mockito:mockito-junit-jupiter'
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
  }

  dependencyManagement {
    resolutionStrategy {
      cacheChangingModulesFor 0, 'seconds'
    }
    imports {
      mavenBom "com.fasterxml.jackson:jackson-bom:${versions.jackson}"
      mavenBom "org.junit:junit-bom:${versions.junit}"
      mavenBom "org.springframework.boot:spring-boot-dependencies:${versions.springBoot}"
      mavenBom "org.springframework.cloud:spring-cloud-dependencies:${versions.springCloud}"
    }
    dependencies {
      dependencySet(group: 'org.slf4j', version: "${versions.slf4j}") {
        entry 'slf4j-api'
        entry 'slf4j-simple'
      }
      dependencySet(group: 'org.mockito', version: "${versions.mockito}") {
        entry 'mockito-core'
        entry 'mockito-inline'
        entry 'mockito-junit-jupiter'
      }

      dependency "org.febit.devkit.gradle:febit-gradle-common:${versions.febitGradleCommon}"
      dependency "org.jodd:jodd-core:${versions.jodd}"
      dependency "org.yaml:snakeyaml:${versions.snakeyaml}"
      dependency "com.google.code.findbugs:jsr305:${versions.jsr305}"
      dependency "com.github.spotbugs:spotbugs-annotations:${versions.spotbugs}"
      dependency "commons-io:commons-io:${versions.commonsIo}"
      dependency "org.apache.commons:commons-lang3:${versions.commonsLang3}"
      dependency "org.apache.commons:commons-collections4:${versions.commonsCollections4}"
      dependency "org.assertj:assertj-core:${versions.assertj}"
      dependency "org.testng:testng:${versions.testng}"
    }
  }
}
